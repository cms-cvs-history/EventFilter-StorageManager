// $Id: DQMEventStore.icc,v 1.1.2.1 2011/02/27 13:56:41 mommsen Exp $
/// @file: DQMEventStore.icc

#include "TROOT.h"
#include "TTimeStamp.h"

#include "toolbox/task/WorkLoopFactory.h"

#include "EventFilter/StorageManager/interface/DQMEventMonitorCollection.h"
#include "EventFilter/StorageManager/interface/DQMEventStore.h"
#include "EventFilter/StorageManager/interface/I2OChain.h"
#include "EventFilter/StorageManager/interface/QueueID.h"
#include "EventFilter/StorageManager/interface/StatisticsReporter.h"
#include "EventFilter/StorageManager/interface/Utils.h"


namespace stor {
    
  template<class EventType, class ConnectionType, class StateMachineType>  
  DQMEventStore<EventType,ConnectionType,StateMachineType>::
  DQMEventStore
  (
    xdaq::ApplicationDescriptor* appDescriptor,
    DQMEventQueueCollectionPtr dqmEventQueueCollection,
    DQMEventMonitorCollection& dqmEventMonColl,
    ConnectionType* connectionType,
    size_t (ConnectionType::*getExpectedUpdatesCount)() const,
    StateMachineType* stateMachineType,
    void (StateMachineType::*moveToFailedState)(xcept::Exception&)
  ) :
  _appDescriptor(appDescriptor),
  _dqmEventQueueCollection(dqmEventQueueCollection),
  _dqmEventMonColl(dqmEventMonColl),
  _connectionType(connectionType),
  _getExpectedUpdatesCount(getExpectedUpdatesCount),
  _stateMachineType(stateMachineType),
  _moveToFailedState(moveToFailedState),
  _topLevelFoldersReadyToServe(1024),
  _processCompletedTopLevelFolders(false)
  {
    gROOT->SetBatch(kTRUE);
    startWorkLoop();
  }

  template<class EventType, class ConnectionType, class StateMachineType>  
  DQMEventStore<EventType,ConnectionType,StateMachineType>::
  ~DQMEventStore()
  {
    clear();
  }

  template<class EventType, class ConnectionType, class StateMachineType>  
  void
  DQMEventStore<EventType,ConnectionType,StateMachineType>::
  clear()
  {
    _processCompletedTopLevelFolders = false;
    _store.clear();
    _topLevelFoldersReadyToServe.clear();
    _tempEventArea.clear();
  }
  
  template<class EventType, class ConnectionType, class StateMachineType>  
  void
  DQMEventStore<EventType,ConnectionType,StateMachineType>::
  purge()
  {
    addReadyTopLevelFoldersToReadyToServe();
    while ( ! _topLevelFoldersReadyToServe.empty() ) ::sleep(1);
    _processCompletedTopLevelFolders = false;
    _store.clear();
  }
  
  template<class EventType, class ConnectionType, class StateMachineType>  
  void
  DQMEventStore<EventType,ConnectionType,StateMachineType>::
  setParameters(DQMProcessingParams const& dqmParams)
  {
    clear();
    _dqmParams = dqmParams;
    _processCompletedTopLevelFolders = true;
    _completedFolderWL->submit(_completedFolderAction);
  }
  
  template<class EventType, class ConnectionType, class StateMachineType>  
  void
  DQMEventStore<EventType,ConnectionType,StateMachineType>::
  addDQMEvent(EventType const& dqmEvent)
  {
    if ( _dqmParams._collateDQM )
      addDQMEventToStore(dqmEvent);
    else
      addDQMEventToReadyToServe(dqmEvent);
  }
  
  template<class EventType, class ConnectionType, class StateMachineType>  
  void
  DQMEventStore<EventType,ConnectionType,StateMachineType>::
  addDQMEventToStore(EventType const& dqmEvent)
  {
    const DQMKey newKey = dqmEvent.dqmKey();
    
    // Use efficientAddOrUpdates pattern suggested by Item 24 of 
    
    // 'Effective STL' by Scott Meyers
    DQMTopLevelFolderMap::iterator pos = _store.lower_bound(newKey);
    
    if(pos == _store.end() || (_store.key_comp()(newKey, pos->first)))
    {
      // Use pos as a hint to insert a new record, so it can avoid another lookup
      DQMTopLevelFolderPtr topLevelFolder( new DQMTopLevelFolder(
          dqmEvent.dqmKey(), dqmEvent.getDQMEventConsumerTags(),
          _dqmParams, _dqmEventMonColl, 
          (_connectionType->*_getExpectedUpdatesCount)()
        ));
      pos = _store.insert(pos, DQMTopLevelFolderMap::value_type(newKey, topLevelFolder));
    }
    pos->second->addDQMEvent(getDQMEventView(dqmEvent));

    addReadyTopLevelFoldersToReadyToServe();
  }
  
  template<class EventType, class ConnectionType, class StateMachineType>  
  void
  DQMEventStore<EventType,ConnectionType,StateMachineType>::
  addDQMEventToReadyToServe(EventType const& dqmEvent)
  {
    DQMTopLevelFolderPtr topLevelFolder( new DQMTopLevelFolder(
        dqmEvent.dqmKey(), dqmEvent.getDQMEventConsumerTags(),
        _dqmParams, _dqmEventMonColl, 1));
    topLevelFolder->addDQMEvent(getDQMEventView(dqmEvent));
    addTopLevelFolderToReadyToServe(topLevelFolder);
  }
  
  template<class EventType, class ConnectionType, class StateMachineType>  
  void
  DQMEventStore<EventType,ConnectionType,StateMachineType>::
  addReadyTopLevelFoldersToReadyToServe()
  {
    DQMTopLevelFolderPtr topLevelFolder;
    
    while ( getNextReadyTopLevelFolder(topLevelFolder) )
    {
      addTopLevelFolderToReadyToServe(topLevelFolder);
    }
  }
  
  template<class EventType, class ConnectionType, class StateMachineType>  
  void
  DQMEventStore<EventType,ConnectionType,StateMachineType>::
  addTopLevelFolderToReadyToServe(const DQMTopLevelFolderPtr topLevelFolder)
  {
    DQMTopLevelFolder::Record record;
    topLevelFolder->getRecord(record);
    _topLevelFoldersReadyToServe.enq_wait(record);
  }

  template<class EventType, class ConnectionType, class StateMachineType>  
  bool
  DQMEventStore<EventType,ConnectionType,StateMachineType>::
  getNextReadyTopLevelFolder(DQMTopLevelFolderPtr& topLevelFolder)
  {
    utils::time_point_t now = utils::getCurrentTime();
    
    DQMTopLevelFolderMap::iterator it = _store.begin();
    DQMTopLevelFolderMap::const_iterator itEnd = _store.end();
    while ( it !=  itEnd && ! it->second->isReady(now) ) ++it;
    
    if ( it == itEnd ) return false;
    
    topLevelFolder = it->second;
    _store.erase(it);
    return true;
  }
  

  template<class EventType, class ConnectionType, class StateMachineType>  
  void
  DQMEventStore<EventType,ConnectionType,StateMachineType>::
  startWorkLoop()
  {
    try
    {
      std::string identifier = utils::getIdentifier(_appDescriptor);
    
      _completedFolderWL = toolbox::task::getWorkLoopFactory()->
        getWorkLoop( identifier + "CompletedFolderWL", "waiting" );
    
      if ( ! _completedFolderWL->isActive() )
      {
        _completedFolderWL->activate();
      }

      _completedFolderAction = 
          toolbox::task::bind(this,
            &DQMEventStore<EventType,ConnectionType,StateMachineType>::
            processCompletedTopLevelFolders,
            identifier + "CompletedFolder");
    }
    catch (xcept::Exception& e)
    {
      std::string msg = "Failed to start workloop 'CompletedFolderWL'.";
      XCEPT_RETHROW(exception::DQMEventProcessing, msg, e);
    }
  }
  
  
  template<class EventType, class ConnectionType, class StateMachineType>  
  bool
  DQMEventStore<EventType,ConnectionType,StateMachineType>::
  processCompletedTopLevelFolders(toolbox::task::WorkLoop*)
  {
    std::string errorMsg = "Failed to send completed top level folders to consumers: ";

    try
    {
      DQMTopLevelFolder::Record record;
      while (
        _topLevelFoldersReadyToServe.deq_nowait(record) &&
        _processCompletedTopLevelFolders )
      {
        _dqmEventQueueCollection->addEvent(record);
      }
    }
    catch(xcept::Exception &e)
    {
      XCEPT_DECLARE_NESTED(exception::DQMEventProcessing,
        sentinelException, errorMsg, e );
      (_stateMachineType->*_moveToFailedState)(sentinelException);
    }
    catch(std::exception &e)
    {
      errorMsg += e.what();
      XCEPT_DECLARE(exception::DQMEventProcessing,
        sentinelException, errorMsg );
      (_stateMachineType->*_moveToFailedState)(sentinelException);
    }
    catch(...)
    {
      errorMsg += "Unknown exception";
      XCEPT_DECLARE(exception::DQMEventProcessing,
        sentinelException, errorMsg );
      (_stateMachineType->*_moveToFailedState)(sentinelException);
    }
      
    return _processCompletedTopLevelFolders;
  }

} // namespace stor


/// emacs configuration
/// Local Variables: -
/// mode: c++ -
/// c-basic-offset: 2 -
/// indent-tabs-mode: nil -
/// End: -
